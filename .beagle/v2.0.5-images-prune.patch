From 8ca16ef175f1f175c1819bc36901ea7ba1c5335a Mon Sep 17 00:00:00 2001
From: shucheng <shucheng@bd-apaas.com>
Date: Sat, 14 Jun 2025 23:55:08 +0800
Subject: [PATCH] v2.0.5-images-prune

---
 cmd/nerdctl/system/system_prune.go |   7 +
 pkg/api/types/image_types.go       |   2 +
 pkg/api/types/system_types.go      |   2 +
 pkg/cmd/image/prune.go             |  10 ++
 pkg/cmd/system/prune.go            |  60 ++++++++
 pkg/imgutil/filtering.go           | 237 ++++++++++++++++++++++++-----
 pkg/imgutil/protection.go          |  83 ++++++++++
 7 files changed, 367 insertions(+), 34 deletions(-)
 create mode 100644 pkg/imgutil/protection.go

diff --git a/cmd/nerdctl/system/system_prune.go b/cmd/nerdctl/system/system_prune.go
index d94698d6..67f66469 100644
--- a/cmd/nerdctl/system/system_prune.go
+++ b/cmd/nerdctl/system/system_prune.go
@@ -44,6 +44,7 @@ func pruneCommand() *cobra.Command {
 	cmd.Flags().BoolP("all", "a", false, "Remove all unused images, not just dangling ones")
 	cmd.Flags().BoolP("force", "f", false, "Do not prompt for confirmation")
 	cmd.Flags().Bool("volumes", false, "Prune volumes")
+	cmd.Flags().String("protected-images-file", "/etc/kubernetes/config/nerdctl.yaml", "Path to the file containing protected images that will not be pruned")
 	return cmd
 }
 
@@ -69,6 +70,11 @@ func pruneOptions(cmd *cobra.Command) (types.SystemPruneOptions, error) {
 		buildkitHost = ""
 	}
 
+	protectedImagesPath, err := cmd.Flags().GetString("protected-images-file")
+	if err != nil {
+		return types.SystemPruneOptions{}, err
+	}
+
 	return types.SystemPruneOptions{
 		Stdout:               cmd.OutOrStdout(),
 		Stderr:               cmd.ErrOrStderr(),
@@ -77,6 +83,7 @@ func pruneOptions(cmd *cobra.Command) (types.SystemPruneOptions, error) {
 		Volumes:              vFlag,
 		BuildKitHost:         buildkitHost,
 		NetworkDriversToKeep: network.NetworkDriversToKeep,
+		ProtectedImagesPath:  protectedImagesPath,
 	}, nil
 }
 
diff --git a/pkg/api/types/image_types.go b/pkg/api/types/image_types.go
index d48e6318..44df5f00 100644
--- a/pkg/api/types/image_types.go
+++ b/pkg/api/types/image_types.go
@@ -243,6 +243,8 @@ type ImagePruneOptions struct {
 	Filters []string
 	// Force will not prompt for confirmation.
 	Force bool
+	// ProtectedImages is a list of image references that should not be pruned
+	ProtectedImages []string
 }
 
 // ImageSaveOptions specifies options for `nerdctl (image) save`.
diff --git a/pkg/api/types/system_types.go b/pkg/api/types/system_types.go
index bfadba7a..dbd6d9ce 100644
--- a/pkg/api/types/system_types.go
+++ b/pkg/api/types/system_types.go
@@ -55,4 +55,6 @@ type SystemPruneOptions struct {
 	BuildKitHost string
 	// NetworkDriversToKeep the network drivers which need to keep
 	NetworkDriversToKeep []string
+	// ProtectedImagesPath path to YAML file containing protected images
+	ProtectedImagesPath string
 }
diff --git a/pkg/cmd/image/prune.go b/pkg/cmd/image/prune.go
index da29fbdb..28545ed3 100644
--- a/pkg/cmd/image/prune.go
+++ b/pkg/cmd/image/prune.go
@@ -55,6 +55,9 @@ func Prune(ctx context.Context, client *containerd.Client, options types.ImagePr
 		if len(parsedFilters.Until) > 0 {
 			filters = append(filters, imgutil.FilterUntil(parsedFilters.Until))
 		}
+		if len(parsedFilters.Reference) > 0 {
+			filters = append(filters, imgutil.FilterByReference(parsedFilters.Reference))
+		}
 	}
 
 	if options.All {
@@ -68,6 +71,13 @@ func Prune(ctx context.Context, client *containerd.Client, options types.ImagePr
 		return err
 	}
 
+	// 输出将要删除的镜像总数
+	if len(imagesToBeRemoved) > 0 {
+		log.G(ctx).Infof("Found %d images to prune", len(imagesToBeRemoved))
+	} else {
+		log.G(ctx).Info("No images to prune")
+	}
+
 	delOpts := []images.DeleteOpt{images.SynchronousDelete()}
 	removedImages := make(map[string][]digest.Digest)
 	for _, image := range imagesToBeRemoved {
diff --git a/pkg/cmd/system/prune.go b/pkg/cmd/system/prune.go
index 19b48ef0..98a77e71 100644
--- a/pkg/cmd/system/prune.go
+++ b/pkg/cmd/system/prune.go
@@ -19,8 +19,10 @@ package system
 import (
 	"context"
 	"fmt"
+	"os"
 
 	containerd "github.com/containerd/containerd/v2/client"
+	"gopkg.in/yaml.v3"
 
 	"github.com/containerd/nerdctl/v2/pkg/api/types"
 	"github.com/containerd/nerdctl/v2/pkg/cmd/builder"
@@ -28,6 +30,7 @@ import (
 	"github.com/containerd/nerdctl/v2/pkg/cmd/image"
 	"github.com/containerd/nerdctl/v2/pkg/cmd/network"
 	"github.com/containerd/nerdctl/v2/pkg/cmd/volume"
+	"github.com/containerd/nerdctl/v2/pkg/referenceutil"
 )
 
 // Prune will remove all unused containers, networks,
@@ -56,10 +59,67 @@ func Prune(ctx context.Context, client *containerd.Client, options types.SystemP
 			return err
 		}
 	}
+
+	// 加载受保护的镜像列表
+	var filters []string
+	if options.ProtectedImagesPath != "" {
+		// 检查文件是否存在
+		if _, err := os.Stat(options.ProtectedImagesPath); os.IsNotExist(err) {
+			fmt.Fprintf(options.Stderr, "Warning: Protected images file not found: %s\n", options.ProtectedImagesPath)
+		} else {
+			// 读取文件内容
+			data, err := os.ReadFile(options.ProtectedImagesPath)
+			if err != nil {
+				fmt.Fprintf(options.Stderr, "Warning: Failed to read protected images file: %v\n", err)
+			} else {
+				// 解析YAML
+				var config struct {
+					ProtectedImages []string `yaml:"protected_images"`
+				}
+				if err := yaml.Unmarshal(data, &config); err != nil {
+					fmt.Fprintf(options.Stderr, "Warning: Failed to parse protected images file: %v\n", err)
+				} else {
+					// 过滤掉空字符串并验证镜像名
+					var validProtectedImages []string
+					for _, img := range config.ProtectedImages {
+						if img == "" {
+							continue // 跳过空字符串
+						}
+
+						// 验证镜像引用格式
+						_, err := referenceutil.Parse(img)
+						if err != nil {
+							fmt.Fprintf(options.Stderr, "Warning: Invalid image reference format: %s (error: %v)\n", img, err)
+							continue
+						}
+
+						validProtectedImages = append(validProtectedImages, img)
+					}
+
+					if len(validProtectedImages) > 0 {
+						fmt.Fprintf(options.Stdout, "Found %d protected images in config file\n", len(validProtectedImages))
+
+						// 为每个保护的镜像创建过滤器
+						for _, img := range validProtectedImages {
+							// 在控制台上详细输出每个受保护的镜像
+							fmt.Fprintf(options.Stdout, "Protecting image: %s\n", img)
+
+							// 添加过滤器，排除特定的镜像
+							filters = append(filters, fmt.Sprintf("reference=!%s", img))
+						}
+					} else {
+						fmt.Fprintf(options.Stdout, "No valid protected images found in config file\n")
+					}
+				}
+			}
+		}
+	}
+
 	if err := image.Prune(ctx, client, types.ImagePruneOptions{
 		Stdout:   options.Stdout,
 		GOptions: options.GOptions,
 		All:      options.All,
+		Filters:  filters,
 	}); err != nil {
 		return nil
 	}
diff --git a/pkg/imgutil/filtering.go b/pkg/imgutil/filtering.go
index 30764f16..1a4f2040 100644
--- a/pkg/imgutil/filtering.go
+++ b/pkg/imgutil/filtering.go
@@ -104,7 +104,42 @@ func ParseFilters(filters []string) (*Filters, error) {
 				// To support filtering labels by keys.
 				f.Labels[tempFilterToken[1]] = ""
 			} else if tempFilterToken[0] == FilterReferenceType {
-				f.Reference = append(f.Reference, tempFilterToken[1])
+				// 处理 reference=!pattern 格式（用于排除模式）
+				if strings.HasPrefix(tempFilterToken[1], "!") {
+					// 移除开头的感叹号，获取真正的模式
+					excludedRef := strings.TrimPrefix(tempFilterToken[1], "!")
+					if excludedRef == "" {
+						log.L.Warn("empty reference pattern in exclude filter, ignoring")
+						continue
+					}
+
+					// 尝试解析引用是否有效
+					_, err := referenceutil.Parse(excludedRef)
+					if err != nil {
+						log.L.Warnf("invalid exclude reference pattern %q: %v, ignoring", excludedRef, err)
+						continue
+					}
+
+					// 添加为带有"!"前缀的引用，表示排除模式
+					f.Reference = append(f.Reference, "!"+excludedRef)
+					log.L.Debugf("added exclude reference filter: !%s", excludedRef)
+				} else {
+					// 标准引用过滤
+					if tempFilterToken[1] == "" {
+						log.L.Warn("empty reference pattern in include filter, ignoring")
+						continue
+					}
+
+					// 尝试解析引用是否有效
+					_, err := referenceutil.Parse(tempFilterToken[1])
+					if err != nil {
+						log.L.Warnf("invalid include reference pattern %q: %v, ignoring", tempFilterToken[1], err)
+						continue
+					}
+
+					f.Reference = append(f.Reference, tempFilterToken[1])
+					log.L.Debugf("added include reference filter: %s", tempFilterToken[1])
+				}
 			} else {
 				return nil, fmt.Errorf("invalid filter %q", filter)
 			}
@@ -263,12 +298,178 @@ func FilterByLabel(ctx context.Context, client *containerd.Client, labels map[st
 // matching the provided reference patterns
 func FilterByReference(referencePatterns []string) Filter {
 	return func(imageList []images.Image) ([]images.Image, error) {
+		// 如果没有引用模式，返回所有镜像
+		if len(referencePatterns) == 0 {
+			return imageList, nil
+		}
+
+		// 分离正向匹配和负向匹配（排除模式）
+		var includePatterns, excludePatterns []string
+		for _, pattern := range referencePatterns {
+			if strings.HasPrefix(pattern, "!") {
+				// 排除模式
+				excludePatterns = append(excludePatterns, strings.TrimPrefix(pattern, "!"))
+			} else {
+				// 包含模式
+				includePatterns = append(includePatterns, pattern)
+			}
+		}
+
+		// 如果只有排除模式，先返回所有镜像，然后应用排除规则
+		if len(includePatterns) == 0 && len(excludePatterns) > 0 {
+			return filter(imageList, func(i images.Image) (bool, error) {
+				// 检查是否应该排除这个镜像
+				for _, pattern := range excludePatterns {
+					matches, err := imageMatchesReference(i, pattern)
+					if err != nil {
+						return false, err
+					}
+					if matches {
+						// 如果匹配排除模式，不保留这个镜像
+						return false, nil
+					}
+				}
+				// 不匹配任何排除模式，保留这个镜像
+				return true, nil
+			})
+		}
+
+		// 处理包含模式和可能的排除模式
 		return filter(imageList, func(i images.Image) (bool, error) {
-			return matchesReferences(i, referencePatterns)
+			// 首先检查是否匹配任何包含模式
+			var includeMatch bool
+			if len(includePatterns) > 0 {
+				for _, pattern := range includePatterns {
+					matches, err := imageMatchesReference(i, pattern)
+					if err != nil {
+						return false, err
+					}
+					if matches {
+						includeMatch = true
+						break
+					}
+				}
+
+				// 如果没有匹配任何包含模式，不保留这个镜像
+				if !includeMatch {
+					return false, nil
+				}
+			}
+
+			// 如果匹配包含模式（或者没有包含模式），检查是否匹配排除模式
+			for _, pattern := range excludePatterns {
+				matches, err := imageMatchesReference(i, pattern)
+				if err != nil {
+					return false, err
+				}
+				if matches {
+					// 如果匹配排除模式，不保留这个镜像
+					return false, nil
+				}
+			}
+
+			// 如果有包含模式，需要匹配至少一个；且不匹配任何排除模式
+			return len(includePatterns) == 0 || includeMatch, nil
 		})
 	}
 }
 
+// 辅助函数：检查镜像是否匹配引用模式
+func imageMatchesReference(image images.Image, pattern string) (bool, error) {
+	// 如果镜像名为空，无法匹配任何模式
+	if image.Name == "" {
+		log.L.Debugf("image name is empty, cannot match against pattern %q", pattern)
+		return false, nil
+	}
+
+	// 如果模式为空，也不能匹配
+	if pattern == "" {
+		log.L.Debug("pattern is empty, cannot match any image")
+		return false, nil
+	}
+
+	// 基础方式：直接字符串匹配
+	if image.Name == pattern {
+		log.L.Debugf("direct string match for image %q against pattern %q", image.Name, pattern)
+		return true, nil
+	}
+
+	// 检查是否是SHA256哈希格式的镜像ID
+	isDigestImage := strings.HasPrefix(image.Name, "sha256:")
+
+	// 如果是摘要格式的镜像ID，我们应该避免使用FamiliarMatch，因为这会导致空指针错误
+	if isDigestImage {
+		log.L.Debugf("image %q is in digest format, skipping FamiliarMatch", image.Name)
+		// 对于摘要格式，我们只通过精确匹配或正则表达式比较
+		// 正则表达式匹配
+		regexpMatch, err := regexp.MatchString(pattern, image.Name)
+		if err != nil {
+			log.L.WithError(err).Warnf("failed to match digest image %q against pattern %q as regex", image.Name, pattern)
+			return false, nil
+		}
+		return regexpMatch, nil
+	}
+
+	// 尝试作为正则表达式匹配（对于非摘要格式的镜像）
+	regexpMatch, err := regexp.MatchString(pattern, image.Name)
+	if err != nil {
+		log.L.WithError(err).Warnf("failed to match image name %q against pattern %q as regex", image.Name, pattern)
+	} else if regexpMatch {
+		log.L.Debugf("regex match for image %q against pattern %q", image.Name, pattern)
+		return true, nil
+	}
+
+	// 尝试解析镜像名称引用
+	parsedReference, err := referenceutil.Parse(image.Name)
+	if err != nil {
+		log.L.WithError(err).Debugf("failed to parse image name %q", image.Name)
+		return false, nil // 解析失败不应该视为错误，而是返回不匹配
+	}
+
+	// 安全检查：确保parsedReference不为nil
+	if parsedReference == nil {
+		log.L.Warnf("parsed reference is nil for image %q", image.Name)
+		return false, nil
+	}
+
+	// 尝试简单的标签或摘要比较
+	if parsedReference.Tag != "" && pattern == parsedReference.Tag {
+		log.L.Debugf("tag match for image %q (tag: %s) against pattern %q", image.Name, parsedReference.Tag, pattern)
+		return true, nil
+	}
+
+	if parsedReference.Digest != "" && pattern == parsedReference.Digest.String() {
+		log.L.Debugf("digest match for image %q (digest: %s) against pattern %q", image.Name, parsedReference.Digest, pattern)
+		return true, nil
+	}
+
+	// 只有当镜像不是摘要格式，并且parsedReference.nn不为nil时，才尝试使用FamiliarMatch
+	if !isDigestImage {
+		// 安全地调用FamiliarMatch，使用recover来捕获潜在的panic
+		var familiarMatch bool
+		func() {
+			defer func() {
+				if r := recover(); r != nil {
+					log.L.Warnf("panic in FamiliarMatch for image %q against pattern %q: %v", image.Name, pattern, r)
+					familiarMatch = false
+				}
+			}()
+
+			var err error
+			familiarMatch, err = parsedReference.FamiliarMatch(pattern)
+			if err != nil {
+				log.L.WithError(err).Debugf("failed to perform familiar match for %q against pattern %q", image.Name, pattern)
+				familiarMatch = false
+			}
+		}()
+
+		return familiarMatch, nil
+	}
+
+	// 对于摘要格式的镜像，如果到这里还没有匹配上，则返回不匹配
+	return false, nil
+}
+
 // FilterDanglingImages filters an image list for dangling (untagged) images.
 func FilterDanglingImages() Filter {
 	return func(imageList []images.Image) ([]images.Image, error) {
@@ -320,38 +521,6 @@ func matchesAllLabels(imageCfgLabels map[string]string, filterLabels map[string]
 	return matches == len(filterLabels)
 }
 
-func matchesReferences(image images.Image, referencePatterns []string) (bool, error) {
-	var matches int
-
-	// Containerd returns ":" for dangling untagged images - see https://github.com/containerd/nerdctl/issues/3852
-	if image.Name == ":" {
-		return false, nil
-	}
-
-	parsedReference, err := referenceutil.Parse(image.Name)
-	if err != nil {
-		return false, err
-	}
-
-	for _, pattern := range referencePatterns {
-		familiarMatch, err := parsedReference.FamiliarMatch(pattern)
-		if err != nil {
-			return false, err
-		}
-
-		regexpMatch, err := regexp.MatchString(pattern, image.Name)
-		if err != nil {
-			return false, err
-		}
-
-		if familiarMatch || regexpMatch {
-			matches++
-		}
-	}
-
-	return matches == len(referencePatterns), nil
-}
-
 func isDangling(image images.Image) bool {
 	_, tag := ParseRepoTag(image.Name)
 	return tag == ""
diff --git a/pkg/imgutil/protection.go b/pkg/imgutil/protection.go
new file mode 100644
index 00000000..37dcf39e
--- /dev/null
+++ b/pkg/imgutil/protection.go
@@ -0,0 +1,83 @@
+/*
+   Copyright The containerd Authors.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+*/
+
+package imgutil
+
+import (
+	"fmt"
+	"os"
+
+	"github.com/containerd/containerd/v2/core/images"
+	"github.com/containerd/log"
+	"gopkg.in/yaml.v3"
+)
+
+// ProtectedImagesConfig 定义了保护镜像的配置结构
+type ProtectedImagesConfig struct {
+	// ProtectedImages 要保护不被清理的镜像列表
+	ProtectedImages []string `yaml:"protected_images"`
+}
+
+// LoadProtectedImages 从YAML文件加载保护的镜像列表
+func LoadProtectedImages(filePath string) (*ProtectedImagesConfig, error) {
+	if filePath == "" {
+		// 如果没有指定文件路径，返回空配置
+		return &ProtectedImagesConfig{}, nil
+	}
+
+	// 检查文件是否存在
+	if _, err := os.Stat(filePath); os.IsNotExist(err) {
+		log.L.Warnf("Protected images file not found: %s", filePath)
+		return &ProtectedImagesConfig{}, nil
+	}
+
+	// 读取文件内容
+	data, err := os.ReadFile(filePath)
+	if err != nil {
+		return nil, fmt.Errorf("failed to read protected images file: %w", err)
+	}
+
+	// 解析YAML
+	var config ProtectedImagesConfig
+	if err := yaml.Unmarshal(data, &config); err != nil {
+		return nil, fmt.Errorf("failed to parse protected images file: %w", err)
+	}
+
+	return &config, nil
+}
+
+// FilterProtectedImages 过滤掉受保护的镜像
+func FilterProtectedImages(protectedImages []string) Filter {
+	// 如果没有保护的镜像，直接返回原始列表
+	if len(protectedImages) == 0 {
+		return func(imageList []images.Image) ([]images.Image, error) {
+			return imageList, nil
+		}
+	}
+
+	// 创建一个映射用于快速查找
+	protected := make(map[string]bool)
+	for _, img := range protectedImages {
+		protected[img] = true
+	}
+
+	return func(imageList []images.Image) ([]images.Image, error) {
+		return filter(imageList, func(i images.Image) (bool, error) {
+			// 如果镜像名不在保护列表中，返回true表示保留该镜像
+			return !protected[i.Name], nil
+		})
+	}
+}
-- 
2.39.5

