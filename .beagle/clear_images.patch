From 18e49809839c7a4c1b75433ccbf5f2a6559569db Mon Sep 17 00:00:00 2001
From: zhangyasong <zhangyasong@wodcloud.com>
Date: Wed, 16 Oct 2024 10:44:46 +0800
Subject: [PATCH] =?UTF-8?q?=E6=B7=BB=E5=8A=A0=E6=B8=85=E7=90=86=E6=9C=AA?=
 =?UTF-8?q?=E5=8F=97=E4=BF=9D=E6=8A=A4=E9=95=9C=E5=83=8F=E9=80=BB=E8=BE=91?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 cmd/nerdctl/image/image_clear.go |  69 ++++++++++++++
 cmd/nerdctl/main.go              |   2 +
 pkg/cmd/image/clear.go           | 152 +++++++++++++++++++++++++++++++
 pkg/cmd/image/images.yaml        |  82 +++++++++++++++++
 4 files changed, 305 insertions(+)
 create mode 100644 cmd/nerdctl/image/image_clear.go
 create mode 100644 pkg/cmd/image/clear.go
 create mode 100644 pkg/cmd/image/images.yaml

diff --git a/cmd/nerdctl/image/image_clear.go b/cmd/nerdctl/image/image_clear.go
new file mode 100644
index 00000000..0e3b83db
--- /dev/null
+++ b/cmd/nerdctl/image/image_clear.go
@@ -0,0 +1,69 @@
+package image
+
+import (
+	"github.com/containerd/nerdctl/v2/cmd/nerdctl/completion"
+	"github.com/containerd/nerdctl/v2/cmd/nerdctl/helpers"
+	"github.com/containerd/nerdctl/v2/pkg/api/types"
+	"github.com/containerd/nerdctl/v2/pkg/clientutil"
+	"github.com/containerd/nerdctl/v2/pkg/cmd/image"
+	"github.com/spf13/cobra"
+)
+
+func NewImageClearCommand() *cobra.Command {
+	var rmiCommand = &cobra.Command{
+		Use:               "beagle-prune [flags] null",
+		Short:             "Clean up unwanted images",
+		Args:              cobra.MinimumNArgs(0),
+		RunE:              clearAction,
+		ValidArgsFunction: clearShellComplete,
+		SilenceUsage:      true,
+		SilenceErrors:     true,
+	}
+	// rmiCommand.Flags().BoolP("force", "f", false, "Force removal of the image")
+	// Alias `-a` is reserved for `--all`. Should be compatible with `podman rmi --all`.
+	rmiCommand.Flags().Bool("async", false, "Asynchronous mode")
+	return rmiCommand
+}
+
+func processImageClearOptions(cmd *cobra.Command) (types.ImageRemoveOptions, error) {
+	globalOptions, err := helpers.ProcessRootCmdFlags(cmd)
+	if err != nil {
+		return types.ImageRemoveOptions{}, err
+	}
+
+	// force, err := cmd.Flags().GetBool("force")
+	// if err != nil {
+	// 	return types.ImageRemoveOptions{}, err
+	// }
+	async, err := cmd.Flags().GetBool("async")
+	if err != nil {
+		return types.ImageRemoveOptions{}, err
+	}
+
+	return types.ImageRemoveOptions{
+		Stdout:   cmd.OutOrStdout(),
+		GOptions: globalOptions,
+		// Force:    force,
+		Async: async,
+	}, nil
+}
+
+func clearAction(cmd *cobra.Command, args []string) error {
+	options, err := processImageClearOptions(cmd)
+	if err != nil {
+		return err
+	}
+
+	client, ctx, cancel, err := clientutil.NewClient(cmd.Context(), options.GOptions.Namespace, options.GOptions.Address)
+	if err != nil {
+		return err
+	}
+	defer cancel()
+
+	return image.Clear(ctx, client, args, options)
+}
+
+func clearShellComplete(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
+	// show image names
+	return completion.ImageNames(cmd)
+}
diff --git a/cmd/nerdctl/main.go b/cmd/nerdctl/main.go
index 1e086b91..6f3ad5fc 100644
--- a/cmd/nerdctl/main.go
+++ b/cmd/nerdctl/main.go
@@ -283,6 +283,8 @@ Config file ($NERDCTL_TOML): %s
 		image.NewTagCommand(),
 		image.NewRmiCommand(),
 		image.NewHistoryCommand(),
+		// add images clear logic
+		image.NewImageClearCommand(),
 		// #endregion
 
 		// #region System
diff --git a/pkg/cmd/image/clear.go b/pkg/cmd/image/clear.go
new file mode 100644
index 00000000..fb7d9558
--- /dev/null
+++ b/pkg/cmd/image/clear.go
@@ -0,0 +1,152 @@
+package image
+
+import (
+	"context"
+	"errors"
+	"fmt"
+	"io/ioutil"
+	"os"
+
+	containerd "github.com/containerd/containerd/v2/client"
+	"github.com/containerd/containerd/v2/core/images"
+	"github.com/containerd/log"
+	"github.com/containerd/platforms"
+	"github.com/opencontainers/go-digest"
+	"gopkg.in/yaml.v3"
+
+	"github.com/containerd/nerdctl/v2/pkg/api/types"
+	"github.com/containerd/nerdctl/v2/pkg/containerutil"
+	"github.com/containerd/nerdctl/v2/pkg/imgutil"
+)
+
+// Image 结构体定义
+type Image struct {
+	Registry string   `yaml:"registry"`
+	Repo     string   `yaml:"repo"`
+	Tags     []string `yaml:"tags"`
+}
+
+// Config 结构体定义
+type Config struct {
+	Images []Image `yaml:"images"`
+}
+
+// 受保护的镜像列表
+var filePath = "/home/nerdctl/images.yaml"
+
+// Remove removes a list of `images`.
+func Clear(ctx context.Context, client *containerd.Client, args []string, options types.ImageRemoveOptions) error {
+	var delOpts []images.DeleteOpt
+	if !options.Async {
+		delOpts = append(delOpts, images.SynchronousDelete())
+	}
+
+	cs := client.ContentStore()
+	is := client.ImageService()
+
+	imageList, err := is.List(ctx, "")
+	if err != nil {
+		return err
+	}
+	containerList, err := client.Containers(ctx)
+	if err != nil {
+		return err
+	}
+	usedImages := make(map[string]string)
+	runningImages := make(map[string]string)
+	for _, container := range containerList {
+		image, err := container.Image(ctx)
+		if err != nil {
+			continue
+		}
+		switch cStatus, _ := containerutil.ContainerStatus(ctx, container); cStatus.Status {
+		case containerd.Running, containerd.Pausing, containerd.Paused:
+			runningImages[image.Name()] = container.ID()
+		default:
+			usedImages[image.Name()] = container.ID()
+		}
+	}
+
+	_, err = os.Stat(filePath)
+	if os.IsNotExist(err) {
+		return errors.New("images.yaml does not exist")
+	}
+
+	// Query protected images
+	var config Config
+	data, err := ioutil.ReadFile(filePath)
+	if err != nil {
+		return err
+	}
+	if err := yaml.Unmarshal(data, &config); err != nil {
+		return err
+	}
+	protectedimages := make(map[string]string)
+	var adskort string
+	for _, v := range config.Images {
+		if len(v.Tags) == 0 {
+			adskort = fmt.Sprintf("%s/%s", v.Registry, v.Repo)
+			protectedimages[adskort] = adskort
+			continue
+		}
+		for _, tag := range v.Tags {
+			adskort = fmt.Sprintf("%s/%s:%s", v.Registry, v.Repo, tag)
+			protectedimages[adskort] = adskort
+		}
+	}
+
+	removedImages := make(map[string][]digest.Digest)
+	for _, image := range imageList {
+		imageobj, err := is.Get(ctx, image.Name)
+		if err != nil {
+			return err
+		}
+		digests, err := imageobj.RootFS(ctx, cs, platforms.DefaultStrict())
+		if err != nil {
+			log.G(ctx).WithError(err).Warnf("failed to enumerate rootfs")
+		}
+
+		repository, tag := imgutil.ParseRepoTag(imageobj.Name)
+		imageName := ""
+		if tag != "" {
+			imageName = repository + ":" + tag
+		} else {
+			imageName = repository
+		}
+		if protectedimages[repository] == "" && protectedimages[repository+":"+tag] == "" {
+			// runningImages continue
+			if _, ok := runningImages[imageName]; ok {
+				fmt.Printf("Running image:%s, Skip deletion", imageName)
+				continue
+			}
+
+			// usedImages continue
+			if _, ok := usedImages[imageName]; ok {
+				fmt.Printf("Used image:%s, Skip deletion", imageName)
+				continue
+			}
+			if tag == "" {
+				imageName = image.Name
+			}
+
+			if err := is.Delete(ctx, imageName, delOpts...); err != nil {
+				return err
+			}
+			removedImages[imageName] = digests
+		} else {
+			fmt.Printf("Protected image:%s, Skip deletion", imageName)
+		}
+	}
+
+	if len(removedImages) > 0 {
+		fmt.Fprintln(options.Stdout, "Deleted Images:")
+		for image, digests := range removedImages {
+			fmt.Fprintf(options.Stdout, "Image name: %s\n", image)
+			for _, digest := range digests {
+				fmt.Fprintf(options.Stdout, "deleted: %s\n", digest)
+			}
+		}
+		fmt.Fprintln(options.Stdout, "")
+	}
+	return nil
+}
diff --git a/pkg/cmd/image/images.yaml b/pkg/cmd/image/images.yaml
new file mode 100644
index 00000000..10068ae1
--- /dev/null
+++ b/pkg/cmd/image/images.yaml
@@ -0,0 +1,82 @@
+images:
+  - registry: "hub.wodcloud.com"
+    repo: "beaglecps/pytorch"
+    tags:
+      - "2.1.2-py310-cu12.1"
+  - registry: "registry.cn-qingdao.aliyuncs.com"
+    repo: "wod/cann"
+    tags:
+      - "6.2-py310-torch111"
+  - registry: "hub.wodcloud.com"
+    repo: "beaglecps/cann"
+    tags:
+      - "6.2-py310-torch111"
+  - registry: "hub.wodcloud.com"
+    repo: "beaglecps/cuda"
+    tags:
+      - "12.1-py310-torch204"
+  - registry: "registry.ali.wodcloud.com"
+    repo: "wod/cuda"
+    tags:
+      - "11.8-py310-torch204"
+  - registry: "registry.ali.wodcloud.com"
+    repo: "wod/cuda"
+    tags:
+      - "12.4-py310-torch204"
+  - registry: "hub.wodcloud.com"
+    repo: "beaglecps/paddle"
+    tags:
+      - "3.0.0b1-gpu-cuda12.3-cudnn9.0-trt8.6.1"
+  - registry: "registry.ali.wodcloud.com"
+    repo: "wod/cuda"
+    tags:
+      - "12.1-py310-torch204"
+  - registry: "registry.ali.wodcloud.com"
+    repo: "wod/cuda"
+    tags:
+      - "12.6-py311"
+  - registry: "registry.cn-qingdao.aliyuncs.com"
+    repo: "wod/pytorch-jupyter"
+    tags:
+      - "py310-23.0.RC2-torch1.11.0-arm64"
+  - registry: "hub.wodcloud.com"
+    repo: "cps/apaas-emergency-v5"
+    tags:
+      - "v1.3"
+      - "v1.3-arm64"
+  - registry: "registry.cn-qingdao.aliyuncs.com"
+    repo: "wod/comfyui"
+    tags:
+      - "1.0.5"
+  - registry: "registry.cn-guangzhou.aliyuncs.com"
+    repo: "cloud-ysf/gpt-sovits"
+    tags:
+      - "24.6.18-py3.9.17-pytorch2.0.1-cu1.18"
+  - registry: "registry.cn-qingdao.aliyuncs.com"
+    repo: "wod/cuda"
+    tags:
+      - "v12.2.2-python310"
+  - registry: "registry.cn-qingdao.aliyuncs.com"
+    repo: "wod/app-linly-dubbing"
+    tags:
+      - "ca12.2-py310"
+  - registry: "registry.cn-qingdao.aliyuncs.com"
+    repo: "chatchat/chatchat"
+    tags:
+      - "0.2.7"
+  - registry: "registry.cn-qingdao.aliyuncs.com"
+    repo: "wod/ollama"
+    tags:
+      - "0.3.12"
+  - registry: "registry.cn-qingdao.aliyuncs.com"
+    repo: "wod/ascendhub-mindie-cann"
+    tags:
+      - "py310-ascend241rc2-cann80-jupyter-arm64"
+  - registry: "registry.beagle.default:6444"
+    repo: "ai/paddle"
+    tags:
+      - "3.0.0b1-gpu-cuda12.3-cudnn9.0-trt8.6.1"
+  - registry: "registry.cn-beijing.aliyuncs.com"
+    repo: "chatchat/chatchat"
+    tags:
+      - "0.2.7"
\ No newline at end of file
-- 
2.45.2.windows.1

